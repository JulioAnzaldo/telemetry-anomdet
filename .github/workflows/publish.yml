# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Python Package CI/CD

on:
  # Publish to PyPI only on official release
  release:
    types: [published]
  # Publish to TestPyPI on push to main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Determine version
        id: version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # Official release
            TAG=${GITHUB_REF#refs/tags/}    # e.g., v0.0.1
            VERSION=${TAG#v}                # strip leading 'v' for PyPI
          else
            # Push to main -> TestPyPI
            VERSION="0.0.0.dev${GITHUB_RUN_NUMBER}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: Update pyproject.toml version
        run: |
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml

      - name: Build distributions
        run: |
          python -m build  # creates dist/*.tar.gz and dist/*.whl

      - name: Upload distributions as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
    environment:
      name: pypi
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish to PyPI or TestPyPI
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "Publishing to PyPI..."
            twine upload dist/*
          else
            echo "Publishing to TestPyPI..."
            twine upload --repository testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}            # For PyPI releases
          TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}  # For TestPyPI